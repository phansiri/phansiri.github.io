---
import MainLayout from '../../layouts/main.astro';
import { getCollection } from 'astro:content';
import { Button } from '@/components/ui/button';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// Get related posts
const allPosts = await getCollection('blog');
const relatedPosts = allPosts
  .filter(p => p.slug !== post.slug && !p.data.draft)
  .filter(p => p.data.category === post.data.category || p.data.tags.some(tag => post.data.tags.includes(tag)))
  .slice(0, 3);

// Format date
function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}

// Get category emoji
function getCategoryEmoji(category: string): string {
  const emojis: Record<string, string> = {
    'AI/ML': 'ü§ñ',
    'Computer Systems': 'üíª',
    'Data Science': 'üìä',
    'Technology': '‚ö°',
    'Career': 'üöÄ',
    'Tutorial': 'üìö'
  };
  return emojis[category] || 'üìù';
}

// Generate structured data for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title,
  "description": post.data.description,
  "author": {
    "@type": "Person",
    "name": post.data.author,
    "url": "https://phansiri.github.io"
  },
  "publisher": {
    "@type": "Person",
    "name": post.data.author
  },
  "datePublished": post.data.publishDate.toISOString(),
  "dateModified": post.data.updatedDate?.toISOString() || post.data.publishDate.toISOString(),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `https://phansiri.github.io/blog/${post.slug}`
  },
  "keywords": post.data.tags.join(', '),
  "articleSection": post.data.category,
  "wordCount": post.body.split(/\s+/).length
};
---

<MainLayout 
  title={`${post.data.title} - Lit Phansiri`}
  description={post.data.description}
  image={post.data.image}
  type="article"
  author={post.data.author}
  publishedTime={post.data.publishDate.toISOString()}
  modifiedTime={post.data.updatedDate?.toISOString() || post.data.publishDate.toISOString()}
  section={post.data.category}
  tags={post.data.tags}
>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  
  <!-- Breadcrumb Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "Home",
        "item": "https://phansiri.github.io"
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": "Blog",
        "item": "https://phansiri.github.io/blog"
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": post.data.title,
        "item": `https://phansiri.github.io/blog/${post.slug}`
      }
    ]
  })} />
  
  <!-- Article Header -->
  <article class="container mx-auto px-4 py-16">
    <div class="max-w-4xl mx-auto">
      <!-- Breadcrumb -->
      <nav class="mb-8">
        <ol class="flex items-center space-x-2 text-sm text-muted-foreground">
          <li><a href="/" class="hover:text-primary transition-colors">Home</a></li>
          <li>‚Üí</li>
          <li><a href="/blog" class="hover:text-primary transition-colors">Blog</a></li>
          <li>‚Üí</li>
          <li class="text-foreground">{post.data.title}</li>
        </ol>
      </nav>

      <!-- Article Meta -->
      <div class="mb-8">
        <div class="flex items-center gap-3 mb-4">
          <span class="text-2xl">{getCategoryEmoji(post.data.category)}</span>
          <span class="px-3 py-1 bg-primary/10 text-primary rounded-full text-sm font-medium">
            {post.data.category}
          </span>
          {post.data.featured && (
            <span class="px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium">
              Featured
            </span>
          )}
        </div>
        
        <h1 class="text-4xl md:text-5xl font-bold mb-6 leading-tight">
          {post.data.title}
        </h1>
        
        <p class="text-xl text-muted-foreground mb-6">
          {post.data.description}
        </p>
        
        <div class="flex items-center gap-6 text-sm text-muted-foreground">
          <div class="flex items-center gap-2">
            <span>By {post.data.author}</span>
          </div>
          <div class="flex items-center gap-2">
            <span>üìÖ</span>
            <span>{formatDate(post.data.publishDate)}</span>
          </div>
          {post.data.updatedDate && (
            <div class="flex items-center gap-2">
              <span>üîÑ</span>
              <span>Updated {formatDate(post.data.updatedDate)}</span>
            </div>
          )}
          <div class="flex items-center gap-2">
            <span>‚è±Ô∏è</span>
            <span>{post.data.readingTime || Math.ceil(post.body.split(/\s+/).length / 200)} min read</span>
          </div>
        </div>
      </div>

      <!-- Tags -->
      <div class="mb-8">
        <div class="flex flex-wrap gap-2">
          {post.data.tags.map((tag) => (
            <span class="px-3 py-1 bg-muted rounded-full text-sm hover:bg-muted/80 transition-colors cursor-pointer">
              #{tag}
            </span>
          ))}
        </div>
      </div>

      <!-- Featured Image -->
      {post.data.image && (
        <div class="mb-12">
          <img 
            src={post.data.image} 
            alt={post.data.imageAlt || post.data.title}
            class="w-full rounded-lg shadow-lg"
            loading="eager"
          />
        </div>
      )}

      <!-- Article Content -->
      <div class="prose prose-lg max-w-none dark:prose-invert">
        <Content />
      </div>

      <!-- Article Footer -->
      <!-- <div class="mt-16 pt-8 border-t">
        <div class="flex items-center justify-between mb-8">
          <div class="flex items-center gap-4">
            <div class="h-12 w-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
              <span class="text-white font-bold">LP</span>
            </div>
            <div>
              <h3 class="font-semibold">{post.data.author}</h3>
              <p class="text-sm text-muted-foreground">Full Stack Data Scientist</p>
            </div>
          </div>
          
          <div class="flex gap-2">
            <Button variant="outline" size="sm">
              <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92-1.31-2.92-2.92-2.92z"/>
              </svg>
              Share
            </Button>
            <Button variant="outline" size="sm">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
              </svg>
              Like
            </Button>
          </div>
        </div>
      </div> -->
    </div>
  </article>

  <!-- Related Posts -->
  {relatedPosts.length > 0 && (
    <section class="container mx-auto px-4 py-16 bg-muted/30">
      <div class="max-w-6xl mx-auto">
        <h2 class="text-3xl font-bold mb-8">Related Posts</h2>
        <div class="grid md:grid-cols-3 gap-6">
          {relatedPosts.map((relatedPost) => (
            <article class="group">
              <a href={`/blog/${relatedPost.slug}`} class="block">
                <div class="bg-card rounded-lg border p-6 hover:border-primary transition-colors h-full">
                  <div class="flex items-center gap-2 mb-3">
                    <span class="text-lg">{getCategoryEmoji(relatedPost.data.category)}</span>
                    <span class="text-sm text-muted-foreground">{relatedPost.data.category}</span>
                    <span class="text-sm text-muted-foreground">‚Ä¢</span>
                    <span class="text-sm text-muted-foreground">{formatDate(relatedPost.data.publishDate)}</span>
                  </div>
                  
                  <h3 class="text-lg font-semibold mb-3 group-hover:text-primary transition-colors line-clamp-2">
                    {relatedPost.data.title}
                  </h3>
                  
                  <p class="text-muted-foreground mb-4 line-clamp-3 text-sm">
                    {relatedPost.data.description}
                  </p>
                  
                  <div class="flex items-center justify-between">
                    <span class="text-sm text-muted-foreground">
                      {relatedPost.data.readingTime || Math.ceil(relatedPost.body.split(/\s+/).length / 200)} min read
                    </span>
                    <span class="text-primary group-hover:translate-x-1 transition-transform">‚Üí</span>
                  </div>
                </div>
              </a>
            </article>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Back to Blog -->
  <section class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto text-center">
      <a href="/blog">
        <Button variant="outline">
          ‚Üê Back to Blog
        </Button>
      </a>
    </div>
  </section>
  </MainLayout>


<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Custom prose styles for blog content */
  :global(.prose) {
    --tw-prose-headings: hsl(var(--foreground));
    --tw-prose-body: hsl(var(--foreground));
    --tw-prose-lead: hsl(var(--muted-foreground));
    --tw-prose-links: hsl(var(--primary));
    --tw-prose-bold: hsl(var(--foreground));
    --tw-prose-counters: hsl(var(--muted-foreground));
    --tw-prose-bullets: hsl(var(--muted-foreground));
    --tw-prose-hr: hsl(var(--border));
    --tw-prose-quotes: hsl(var(--foreground));
    --tw-prose-quote-borders: hsl(var(--border));
    --tw-prose-captions: hsl(var(--muted-foreground));
    --tw-prose-code: hsl(var(--foreground));
    --tw-prose-pre-code: hsl(var(--muted-foreground));
    --tw-prose-pre-bg: hsl(var(--muted));
    --tw-prose-th-borders: hsl(var(--border));
    --tw-prose-td-borders: hsl(var(--border));
  }

  :global(.prose pre) {
    background-color: hsl(var(--muted));
    border: 1px solid hsl(var(--border));
    border-radius: 0.5rem;
    overflow-x: auto;
    overflow-y: hidden;
    padding-left: 1rem;
    padding-right: 1rem;
  }

  /* Target Astro's syntax highlighted code blocks */
  :global(.prose pre.astro-code) {
    border-radius: 0.5rem !important;
    overflow-x: auto !important;
    overflow-y: hidden !important;
    padding-left: 1rem !important;
    padding-right: 1rem !important;
  }

  /* Override inline styles for code blocks */
  :global(.prose pre[style*="background-color"]) {
    border-radius: 0.5rem !important;
    overflow-x: auto !important;
    overflow-y: hidden !important;
    padding-left: 1rem !important;
    padding-right: 1rem !important;
  }

  /* Code block headers (file path/language display) */
  :global(.prose pre) {
    position: relative;
    margin-top: 2rem;
  }

  :global(.prose pre::before) {
    content: attr(data-language);
    position: absolute;
    top: -1.5rem;
    left: 0;
    background: hsl(var(--muted));
    color: hsl(var(--muted-foreground));
    padding: 0.25rem 0.75rem;
    border-radius: 0.375rem 0.375rem 0 0;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border: 1px solid hsl(var(--border));
    border-bottom: none;
    z-index: 1;
    font-family: var(--font-mono);
  }


  /* Adjust code block border radius when it has a header */
  :global(.prose pre::before) {
    border-radius: 0.375rem 0.375rem 0 0;
  }

  :global(.prose pre) {
    border-radius: 0 0 0.5rem 0.5rem;
    margin-top: 0;
    padding-top: 1rem;
  }

  /* Theme-specific code header adjustments */
  :global(.dark .prose pre::before) {
    font-weight: 400;
    opacity: 0.9;
  }

  :global(:root:not(.dark) .prose pre::before) {
    font-weight: 500;
    opacity: 0.8;
  }


  :global(.prose code) {
    background-color: hsl(var(--muted));
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
    font-family: var(--font-mono);
    font-weight: 400;
  }

  :global(.prose pre code) {
    background-color: transparent;
    padding: 0;
    font-family: var(--font-mono);
    font-weight: 400;
  }

  /* Theme-specific inline code adjustments */
  :global(.dark .prose code) {
    font-weight: 300;
    color: oklch(0.8 0 0); /* Softer white for inline code in dark mode */
  }

  :global(:root:not(.dark) .prose code) {
    font-weight: 400;
    color: oklch(0.25 0 0); /* Slightly softer black for inline code in light mode */
  }

  /* Dark mode code block color adjustments */
  :global(.dark .prose pre code) {
    color: oklch(0.8 0 0); /* Softer white for code blocks in dark mode */
  }

  :global(.dark .prose pre) {
    color: oklch(0.8 0 0); /* Softer white for pre blocks in dark mode */
  }

  /* Light mode code block color adjustments */
  :global(:root:not(.dark) .prose pre code) {
    color: oklch(0.25 0 0); /* Slightly softer black for code blocks in light mode */
  }

  /* Table styling */
  :global(.prose table) {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
    border: 1px solid hsl(var(--foreground));
    border-radius: 0.5rem;
    overflow: hidden;
  }

  :global(.prose thead) {
    background-color: hsl(var(--muted));
  }

  :global(.prose th) {
    padding: 0.75rem 1rem;
    text-align: left;
    font-weight: 600;
    border-bottom: 1px solid hsl(var(--foreground));
    color: hsl(var(--foreground));
  }

  :global(.prose td) {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid hsl(var(--foreground));
    color: hsl(var(--foreground));
  }

  :global(.prose tbody tr:last-child td) {
    border-bottom: none;
  }

  :global(.prose tbody tr:hover) {
    background-color: hsl(var(--muted) / 0.5);
  }

  :global(:root:not(.dark) .prose pre) {
    color: oklch(0.25 0 0); /* Slightly softer black for pre blocks in light mode */
  }
</style>
