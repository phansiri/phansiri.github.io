---
import MainLayout from '../../layouts/main.astro';
import { getCollection } from 'astro:content';
import { Button } from '@/components/ui/button';
import { getPaginatedPosts, calculateReadingTime, formatDate, getCategoryEmoji, groupPostsByCategory } from '../../lib/blog';

// Pagination configuration
const POSTS_PER_PAGE = 6;
const currentPage = 1; // Main blog page shows first page

// Get paginated posts
const paginationResult = await getPaginatedPosts({
  postsPerPage: POSTS_PER_PAGE,
  currentPage
});

const { posts, totalPosts, totalPages, startIndex, endIndex, paginationUrls } = paginationResult;

// Get featured posts
const allPosts = await getCollection('blog');
const publishedPosts = allPosts
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());
const featuredPosts = publishedPosts.filter(post => post.data.featured).slice(0, 2);

// Get all categories for filter
const allCategories = [...new Set(publishedPosts.map(post => post.data.category))];

// Group posts by category for current page
const postsByCategory = groupPostsByCategory(posts);
---

<MainLayout 
  title="Blog - Lit Phansiri" 
  description="Insights on AI/ML, computer systems, and technology from a full-stack data scientist's perspective"
>
  <!-- Hero Section -->
  <section class="container mx-auto px-4 py-16 text-center">
    <div class="max-w-3xl mx-auto">
      <h1 class="text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent py-1">
        Blog
      </h1>
      <p class="text-xl text-muted-foreground mb-8">
        Deep dives into AI/ML, computer systems, and technology. Sharing insights from building production systems and exploring cutting-edge research.
      </p>
    </div>
  </section>

  <!-- Search and Filter Section -->
  <section class="container mx-auto px-4 py-2">
    <div class="max-w-6xl mx-auto">
      <div class="bg-card rounded-lg border p-6 mb-8">
        <div class="flex flex-col md:flex-row gap-4">
          <!-- Search Input -->
          <div class="flex-1">
            <div class="relative">
              <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <input 
                id="search-input"
                type="text" 
                placeholder="Search posts by title, description, or tags..." 
                class="w-full pl-10 pr-4 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
              />
            </div>
          </div>
          
          <!-- Category Filter -->
          <div class="md:w-64">
            <select 
              id="category-filter"
              class="w-full px-4 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
            >
              <option value="">All Categories</option>
              {allCategories.map(category => (
                <option value={category}>{getCategoryEmoji(category)} {category}</option>
              ))}
            </select>
          </div>
          
          <!-- Sort Options -->
          <div class="md:w-48">
            <select 
              id="sort-options"
              class="w-full px-4 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
            >
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="title">Title A-Z</option>
              <option value="reading-time">Reading Time</option>
            </select>
          </div>
        </div>
        
        <!-- Search Results Info -->
        <div id="search-results-info" class="mt-4 text-sm text-muted-foreground hidden">
          <span id="results-count">0</span> posts found
          <button id="clear-filters" class="ml-4 text-primary hover:underline">Clear filters</button>
        </div>
      </div>
    </div>
  </section>

  <!-- Featured Posts -->
  {featuredPosts.length > 0 && (
    <section class="container mx-auto px-4 py-16">
      <div class="max-w-6xl mx-auto">
        <h2 class="text-3xl font-bold mb-8">Featured Posts</h2>
        <div class="grid md:grid-cols-2 gap-8">
          {featuredPosts.map((post) => (
            <article class="group featured-post" data-category={post.data.category} data-title={post.data.title.toLowerCase()} data-tags={post.data.tags.join(' ').toLowerCase()}>
              <a href={`/blog/${post.slug}`} class="block">
                <div class="bg-card rounded-lg border p-6 hover:border-primary transition-colors">
                  <div class="flex items-center gap-2 mb-4">
                    <span class="text-2xl">{getCategoryEmoji(post.data.category)}</span>
                    <span class="text-sm text-muted-foreground">{post.data.category}</span>
                    <span class="text-sm text-muted-foreground">•</span>
                    <span class="text-sm text-muted-foreground">{formatDate(post.data.publishDate)}</span>
                  </div>
                  
                  <h3 class="text-xl font-semibold mb-3 group-hover:text-primary transition-colors">
                    {post.data.title}
                  </h3>
                  
                  <p class="text-muted-foreground mb-4 line-clamp-3">
                    {post.data.description}
                  </p>
                  
                  <div class="flex items-center justify-between">
                    <div class="flex items-center gap-4 text-sm text-muted-foreground">
                      <span>{post.data.readingTime || calculateReadingTime(post.body)} min read</span>
                      <div class="flex gap-1">
                        {post.data.tags.slice(0, 3).map((tag) => (
                          <span class="px-2 py-1 bg-muted rounded text-xs">{tag}</span>
                        ))}
                      </div>
                    </div>
                    <span class="text-primary group-hover:translate-x-1 transition-transform">→</span>
                  </div>
                </div>
              </a>
            </article>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- All Posts by Category -->
  <section class="container mx-auto px-4 py-16">
    <div class="max-w-6xl mx-auto">
      <h2 class="text-3xl font-bold mb-8">All Posts</h2>
      
      <div id="posts-container">
        {Object.keys(postsByCategory).length > 0 ? (
          Object.entries(postsByCategory).map(([category, categoryPosts]) => (
            <div class="mb-12 category-section" data-category={category}>
              <div class="flex items-center gap-3 mb-6">
                <span class="text-3xl">{getCategoryEmoji(category)}</span>
                <h3 class="text-2xl font-semibold">{category}</h3>
                <span class="text-sm text-muted-foreground">(<span class="category-count">{categoryPosts.length}</span> posts)</span>
              </div>
              
              <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                {categoryPosts.map((post) => (
                  <article class="group blog-post" data-category={post.data.category} data-title={post.data.title.toLowerCase()} data-tags={post.data.tags.join(' ').toLowerCase()} data-reading-time={post.data.readingTime || calculateReadingTime(post.body)}>
                    <a href={`/blog/${post.slug}`} class="block">
                      <div class="bg-card rounded-lg border p-6 hover:border-primary transition-colors h-full">
                        <div class="flex items-center gap-2 mb-3">
                          <span class="text-sm text-muted-foreground">{formatDate(post.data.publishDate)}</span>
                          <span class="text-sm text-muted-foreground">•</span>
                          <span class="text-sm text-muted-foreground">{post.data.readingTime || calculateReadingTime(post.body)} min read</span>
                        </div>
                        
                        <h4 class="text-lg font-semibold mb-3 group-hover:text-primary transition-colors line-clamp-2">
                          {post.data.title}
                        </h4>
                        
                        <p class="text-muted-foreground mb-4 line-clamp-3 text-sm">
                          {post.data.description}
                        </p>
                        
                        <div class="flex flex-wrap gap-1 mb-4">
                          {post.data.tags.slice(0, 3).map((tag) => (
                            <span class="px-2 py-1 bg-muted rounded text-xs">{tag}</span>
                          ))}
                        </div>
                        
                        <div class="flex items-center justify-between">
                          <span class="text-sm text-muted-foreground">Read more</span>
                          <span class="text-primary group-hover:translate-x-1 transition-transform">→</span>
                        </div>
                      </div>
                    </a>
                  </article>
                ))}
              </div>
            </div>
          ))
        ) : (
          <div class="text-center py-16">
            <p class="text-muted-foreground">No posts found.</p>
          </div>
        )}
      </div>
    </div>
  </section>

  <!-- Pagination -->
  {totalPages > 1 && (
    <section class="container mx-auto px-4 py-16">
      <div class="max-w-4xl mx-auto">
        <nav class="flex items-center justify-center gap-2" aria-label="Blog pagination">
          {paginationUrls.map((url) => (
            <a
              href={url.url}
              class={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                url.current
                  ? 'bg-primary text-primary-foreground'
                  : url.type === 'next'
                  ? 'bg-muted text-muted-foreground hover:bg-muted/80'
                  : 'bg-background border hover:bg-muted'
              }`}
              aria-current={url.current ? 'page' : undefined}
            >
              {url.label}
            </a>
          ))}
        </nav>
        
        <div class="text-center mt-4 text-sm text-muted-foreground">
          Showing {startIndex + 1}-{Math.min(endIndex, totalPosts)} of {totalPosts} posts
        </div>
      </div>
    </section>
  )}
</MainLayout>

<script>
  // Search and filter functionality
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const categoryFilter = document.getElementById('category-filter');
    const sortOptions = document.getElementById('sort-options');
    const searchResultsInfo = document.getElementById('search-results-info');
    const resultsCount = document.getElementById('results-count');
    const clearFilters = document.getElementById('clear-filters');
    
    const allPosts = document.querySelectorAll('.blog-post, .featured-post');
    const categorySections = document.querySelectorAll('.category-section');
    
    function filterAndSearch() {
      const searchTerm = searchInput.value.toLowerCase().trim();
      const selectedCategory = categoryFilter.value;
      const sortBy = sortOptions.value;
      
      let visiblePosts = [];
      let totalVisible = 0;
      
      // Filter posts
      allPosts.forEach(post => {
        const title = post.dataset.title || '';
        const tags = post.dataset.tags || '';
        const category = post.dataset.category || '';
        const description = post.querySelector('p')?.textContent?.toLowerCase() || '';
        
        const matchesSearch = !searchTerm || 
          title.includes(searchTerm) || 
          tags.includes(searchTerm) || 
          description.includes(searchTerm);
        
        const matchesCategory = !selectedCategory || category === selectedCategory;
        
        if (matchesSearch && matchesCategory) {
          post.style.display = 'block';
          visiblePosts.push(post);
          totalVisible++;
        } else {
          post.style.display = 'none';
        }
      });
      
      // Sort posts
      if (sortBy === 'newest') {
        visiblePosts.sort((a, b) => {
          const dateA = new Date(a.querySelector('.text-muted-foreground')?.textContent || '');
          const dateB = new Date(b.querySelector('.text-muted-foreground')?.textContent || '');
          return dateB - dateA;
        });
      } else if (sortBy === 'oldest') {
        visiblePosts.sort((a, b) => {
          const dateA = new Date(a.querySelector('.text-muted-foreground')?.textContent || '');
          const dateB = new Date(b.querySelector('.text-muted-foreground')?.textContent || '');
          return dateA - dateB;
        });
      } else if (sortBy === 'title') {
        visiblePosts.sort((a, b) => {
          const titleA = a.querySelector('h3, h4')?.textContent || '';
          const titleB = b.querySelector('h3, h4')?.textContent || '';
          return titleA.localeCompare(titleB);
        });
      } else if (sortBy === 'reading-time') {
        visiblePosts.sort((a, b) => {
          const timeA = parseInt(a.dataset.readingTime || '0');
          const timeB = parseInt(b.dataset.readingTime || '0');
          return timeA - timeB;
        });
      }
      
      // Reorder posts in DOM
      const postsContainer = document.getElementById('posts-container');
      visiblePosts.forEach(post => {
        postsContainer.appendChild(post.parentElement);
      });
      
      // Update category sections visibility
      categorySections.forEach(section => {
        const visibleInSection = section.querySelectorAll('.blog-post[style*="block"], .featured-post[style*="block"]').length;
        const categoryCount = section.querySelector('.category-count');
        
        if (visibleInSection > 0) {
          section.style.display = 'block';
          if (categoryCount) {
            categoryCount.textContent = visibleInSection;
          }
        } else {
          section.style.display = 'none';
        }
      });
      
      // Show/hide search results info
      if (searchTerm || selectedCategory) {
        searchResultsInfo.classList.remove('hidden');
        resultsCount.textContent = totalVisible;
      } else {
        searchResultsInfo.classList.add('hidden');
      }
    }
    
    // Event listeners
    searchInput.addEventListener('input', filterAndSearch);
    categoryFilter.addEventListener('change', filterAndSearch);
    sortOptions.addEventListener('change', filterAndSearch);
    
    clearFilters.addEventListener('click', function() {
      searchInput.value = '';
      categoryFilter.value = '';
      sortOptions.value = 'newest';
      filterAndSearch();
    });
    
    // Highlight search terms
    function highlightSearchTerms() {
      const searchTerm = searchInput.value.toLowerCase().trim();
      if (!searchTerm) return;
      
      allPosts.forEach(post => {
        const title = post.querySelector('h3, h4');
        const description = post.querySelector('p');
        
        if (title && title.textContent.toLowerCase().includes(searchTerm)) {
          const regex = new RegExp(`(${searchTerm})`, 'gi');
          title.innerHTML = title.textContent.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-800">$1</mark>');
        }
        
        if (description && description.textContent.toLowerCase().includes(searchTerm)) {
          const regex = new RegExp(`(${searchTerm})`, 'gi');
          description.innerHTML = description.textContent.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-800">$1</mark>');
        }
      });
    }
    
    searchInput.addEventListener('input', function() {
      setTimeout(highlightSearchTerms, 100);
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  mark {
    background-color: hsl(var(--yellow-200));
    color: hsl(var(--yellow-900));
  }
  
  :global(.dark) mark {
    background-color: hsl(var(--yellow-800));
    color: hsl(var(--yellow-100));
  }
</style>