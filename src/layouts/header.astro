---
export interface Props {
	title?: string;
	description?: string;
	currentPath?: string;
}

const { 
	title = "Portfolio", 
	description = "Developer Portfolio & Blog",
	currentPath = "/"
} = Astro.props;

const navigation = [
	{ name: 'Home', href: '/' },
	{ name: 'About', href: '/about' },
	{ name: 'Blog', href: '/blog' },
	{ name: 'Experiences', href: '/experiences' },
	{ name: 'Projects', href: '/projects' },
	{ name: 'Education', href: '/education' },
	{ name: 'Contact', href: '/contact' },
];

const isActive = (href: string) => {
	return currentPath === href || (href !== '/' && currentPath.startsWith(href));
};
---

<header class="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
	<div class="container mx-auto px-4 sm:px-6 lg:px-8">
		<div class="flex h-16 items-center justify-between">
			<!-- Logo/Brand -->
			<div class="flex items-center space-x-2">
				<a href="/" class="flex items-center space-x-2 hover:opacity-80 transition-opacity">
					<div class="h-8 w-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
						<span class="text-white font-bold text-sm">LP</span>
					</div>
					<span class="font-bold text-xl text-foreground">{title}</span>
				</a>
			</div>

			<!-- Desktop Navigation -->
			<nav class="hidden md:flex items-center space-x-8">
				{navigation.map((item) => (
					<a 
						href={item.href}
						class={`text-sm font-medium transition-colors hover:text-primary ${
							isActive(item.href) 
								? 'text-primary border-b-2 border-primary pb-1' 
								: 'text-muted-foreground'
						}`}
					>
						{item.name}
					</a>
				))}
			</nav>

			<!-- Right side actions -->
			<div class="flex items-center space-x-4">
				<!-- Theme Toggle -->
				<button 
					id="theme-toggle" 
					class="p-2 rounded-md hover:bg-accent transition-colors"
					aria-label="Toggle theme"
				>
					<svg class="h-5 w-5 sun-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
					</svg>
					<svg class="h-5 w-5 moon-icon hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
					</svg>
				</button>

				<!-- Mobile Menu Button -->
				<button 
					id="mobile-menu-button"
					class="md:hidden p-2 rounded-md hover:bg-accent transition-colors"
					aria-label="Toggle mobile menu"
					aria-expanded="false"
				>
					<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
					</svg>
				</button>
			</div>
		</div>

		<!-- Mobile Navigation -->
		<div id="mobile-menu" class="md:hidden hidden border-t bg-background">
			<div class="px-2 pt-2 pb-3 space-y-1">
				{navigation.map((item) => (
					<a 
						href={item.href}
						class={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${
							isActive(item.href) 
								? 'text-primary bg-accent' 
								: 'text-muted-foreground hover:text-primary hover:bg-accent'
						}`}
					>
						{item.name}
					</a>
				))}
			</div>
		</div>
	</div>
</header>

<!-- Theme Toggle Script -->
<script is:inline>
	// Theme management
	const theme = (() => {
		const localStorageTheme = localStorage?.getItem("theme") ?? '';
		if (['dark', 'light'].includes(localStorageTheme)) {
			return localStorageTheme;
		}
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			return 'dark';
		}
		return 'light';
	})();
		
	if (theme === 'light') {
		document.documentElement.classList.remove('dark');
	} else {
		document.documentElement.classList.add('dark');
	}

	window.localStorage.setItem('theme', theme);

	const handleThemeToggle = () => {
		const element = document.documentElement;
		element.classList.toggle("dark");
		
		const isDark = element.classList.contains("dark");
		localStorage.setItem("theme", isDark ? "dark" : "light");
		
		// Update icons
		const sunIcon = document.querySelector('.sun-icon');
		const moonIcon = document.querySelector('.moon-icon');
		
		if (isDark) {
			sunIcon?.classList.add('hidden');
			moonIcon?.classList.remove('hidden');
		} else {
			sunIcon?.classList.remove('hidden');
			moonIcon?.classList.add('hidden');
		}
	}

	// Mobile menu toggle
	const handleMobileMenuToggle = () => {
		const mobileMenu = document.getElementById('mobile-menu');
		const menuButton = document.getElementById('mobile-menu-button');
		
		if (mobileMenu && menuButton) {
			const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
			menuButton.setAttribute('aria-expanded', !isExpanded);
			mobileMenu.classList.toggle('hidden');
		}
	}

	// Add event listeners
	document.addEventListener('DOMContentLoaded', () => {
		const themeToggle = document.getElementById('theme-toggle');
		const mobileMenuButton = document.getElementById('mobile-menu-button');
		
		themeToggle?.addEventListener('click', handleThemeToggle);
		mobileMenuButton?.addEventListener('click', handleMobileMenuToggle);
		
		// Set initial theme icon state
		const isDark = document.documentElement.classList.contains('dark');
		const sunIcon = document.querySelector('.sun-icon');
		const moonIcon = document.querySelector('.moon-icon');
		
		if (isDark) {
			sunIcon?.classList.add('hidden');
			moonIcon?.classList.remove('hidden');
		} else {
			sunIcon?.classList.remove('hidden');
			moonIcon?.classList.add('hidden');
		}
	});
</script>

<style>
	/* Theme-specific styles */
	.sun-icon { fill: black; }
	.moon-icon { fill: transparent; }

	:global(.dark) .sun-icon { fill: transparent; }
	:global(.dark) .moon-icon { fill: white; }
</style>
